<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--了解：在Spring整合MyBatis时数据源往往交给Spring来配置-->
    <!--1.properties：引入外部配置文件的内容-->
    <!--resource：引入类路径下的资源；url：引入网络路径或者磁盘路径下的资源-->
    <properties resource="db.properties"/>

    <!--2.settings：包含很多重要的设置项-->
    <settings>
        <!--setting：用来设置每一个设置项-->
        <!--name：设置项名；value：设置项值-->
        <setting name="mapUnderscoreToCamelCase" value="true"/>
    </settings>

    <!--3.typeAliases：别名处理器，可以为实体类起别名-->
    <!--注意：别名不区分大小写；别名虽然方便，但还是推荐使用全类名，方便直接追寻类-->
    <typeAliases>
        <!--1).typeAlias：为某个实体类起别名-->
        <!--type：指定要起别名的实体类的全类名，默认别名是类名小写；alias：指定新的别名-->
        <!--<typeAlias type="com.atguigu.mybatis.bean.Employee" alias="emp"/>-->

        <!--2).package：为某个包下的所有类批量起别名-->
        <!--name：指定包名，为当前包及其所有后代包下的每一个实体类都起一个默认别名，即类名小写-->
        <package name="com.atguigu.mybatis.bean"/>

        <!--3).批量起别名的情况下，使用@Alias注解为某个实体类指定新的别名-->
    </typeAliases>

    <!--了解：在Spring整合MyBatis时事务管理器往往交给Spring来配置-->
    <!--4.environments：可以配置多种环境-->
    <!--default：指定使用某种环境，可以达到快速切换环境-->
    <environments default="dev_mysql">
        <!--environment：配置一个具体的环境信息-->
        <!--id：当前环境的唯一标识-->
        <environment id="dev_mysql">
            <!--transactionManager：事务管理器-->
            <!--type：事务管理器的类型，JDBC(JdbcTransactionFactory)|MANAGED(ManagedTransactionFactory)-->
            <!--自定义事务管理器：实现TransactionFactory接口，type指定为实现类的全类名-->
            <transactionManager type="JDBC"/>
            <!--dataSource：数据源-->
            <!--type：数据源类型，UNPOOLED(UnpooledDataSourceFactory)|POOLED(PooledDataSourceFactory)|JNDI(JndiDataSourceFactory)-->
            <!--自定义数据源：实现DataSourceFactory接口，type指定为实现类的全类名-->
            <dataSource type="POOLED">
                <property name="driver" value="${jdbc.driver}"/>
                <property name="url" value="${jdbc.url}"/>
                <property name="username" value="${jdbc.username}"/>
                <property name="password" value="${jdbc.password}"/>
            </dataSource>
        </environment>
        <environment id="dev_oracle">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="${orcl.driver}"/>
                <property name="url" value="${orcl.url}"/>
                <property name="username" value="${orcl.username}"/>
                <property name="password" value="${orcl.password}"/>
            </dataSource>
        </environment>
    </environments>

    <!--5.databaseIdProvider：多数据库厂商支持-->
    <!--type="DB_VENDOR"：VendorDatabaseIdProvider，作用是得到数据库厂商的标识，MyBatis能根据数据库厂商的标识来执行不同的SQL-->
    <databaseIdProvider type="DB_VENDOR">
        <!--为不同的数据库厂商起别名-->
        <property name="MySQL" value="mysql"/>
        <property name="Oracle" value="oracle"/>
        <property name="SQL Server" value="sqlserver"/>
    </databaseIdProvider>

    <!--将我们写好的SQL映射文件EmployeeMapper.xml注册到全局配置文件mybatis-config.xml中-->
    <!--6.mappers：将SQL映射注册到全局配置中-->
    <mappers>
        <!--mapper：注册一个SQL映射-->
        <!--1).注册配置文件-->
        <!--resource：引用类路径下的SQL映射文件，mybatis/mapper/EmployeeMapper.xml-->
        <!--url：引用网络路径或者磁盘路径下的SQL映射文件，file:///var/mappers/AuthorMapper.xml-->
        <!--<mapper resource="mybatis/mapper/EmployeeMapper.xml"/>-->

        <!--2).注册接口-->
        <!--class：引用注册接口全类名；有SQL映射文件，映射文件名必须和接口同名，并且得和接口在同一目录下；没有SQL映射文件，所有的SQL都是利用注解写在接口中-->
        <!--推荐：比较重要的、复杂的Dao接口写SQL映射文件；不重要的，简单的Dao接口为了开发快速可以使用注解-->
        <!--<mapper class="com.atguigu.mybatis.dao.EmployeeMapperAnnotation"/>-->

        <!--package：批量注册-->
        <package name="com.atguigu.mybatis.dao"/>
    </mappers>
</configuration>