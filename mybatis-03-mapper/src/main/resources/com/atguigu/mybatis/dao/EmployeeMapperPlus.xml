<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.atguigu.mybatis.dao.EmployeeMapperPlus">
    <!--自定义某个JavaBean的封装规则-->
    <!--id：唯一标识，方便引用；type：自定义规则的Java类型-->
    <resultMap id="MySimEmp" type="com.atguigu.mybatis.bean.Employee">
        <!--指定主键列的封装规则：使用id标签指定主键，底层会有优化-->
        <!--column：指定哪一列；property：指定对应的JavaBean属性-->
        <id column="id" property="id"/>
        <!--指定普通列的封装规则-->
        <result column="last_name" property="lastName"/>
        <!--其他不指定的列会自动封装：我们只要写resultMap，就把全部的映射规则都写上-->
        <result column="email" property="email"/>
        <result column="gender" property="gender"/>
    </resultMap>
    <!--resultMap：自定义结果集映射规则-->
    <!--public Employee getEmpById(Integer id);-->
    <select id="getEmpById" resultMap="MySimEmp">
        select *
        from tbl_employee
        where id = #{id}
    </select>

    <!--场景一：查询员工的同时查询员工对应的部门信息-->
    <!--联合查询：级联属性封装结果集-->
    <resultMap id="MyDifEmp" type="com.atguigu.mybatis.bean.Employee">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="gender" property="gender"/>
        <result column="email" property="email"/>
        <result column="did" property="dept.id"/>
        <result column="dept_name" property="dept.departmentName"/>
    </resultMap>
    <!--使用association标签定义关联对象的封装规则-->
    <resultMap id="MyDifEmp2" type="com.atguigu.mybatis.bean.Employee">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="gender" property="gender"/>
        <result column="email" property="email"/>
        <!--property：指定关联属性；javaType：指定关联对象的类型，不能省略-->
        <association property="dept" javaType="com.atguigu.mybatis.bean.Department">
            <id column="did" property="id"/>
            <result column="dept_name" property="departmentName"/>
        </association>
    </resultMap>
    <!--public Employee getEmpAndDept(Integer id);-->
    <select id="getEmpAndDept" resultMap="MyDifEmp2">
        select e.id id, e.last_name last_name, e.gender gender, e.email email, e.d_id d_id, d.id did, d.dept_name dept_name
        from tbl_employee e,
             tbl_dept d
        where e.d_id = d.id
          and e.id = #{id}
    </select>

    <!--使用association标签进行分步查询：1.先按照员工id查询员工信息；2.根据查询员工信息中的d_id值去部门表查出部门信息；3.将部门信息设置到员工信息中-->
    <resultMap id="MyEmpByStep" type="com.atguigu.mybatis.bean.Employee">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="gender" property="gender"/>
        <result column="email" property="email"/>
        <!--property：指定关联属性；select：表明当前属性是调用select指定的方法查出的结果；column：指定将哪一列的值传递给这个方法的参数-->
        <!--流程：使用select指定的方法查出对象，并封装给property指定的属性，其中方法参数为column指定列的值-->
        <association property="dept" select="com.atguigu.mybatis.dao.DepartmentMapper.getDeptById" column="d_id"/>
    </resultMap>
    <!--public Employee getEmpByIdStep(Integer id);-->
    <select id="getEmpByIdStep" resultMap="MyEmpByStep">
        select *
        from tbl_employee
        where id = #{id}
    </select>
    <!--可以使用延迟加载和按需加载：分段查询的基础之上在全局配置文件中加上这两个配置，部门信息会在我们使用的时候再去查询-->

    <!--场景二：查询部门的同时查询部门对应的所有员工信息，注释在DepartmentMapper.xml中-->
    <!--public List<Employee> getEmpsByDeptId(Integer deptId);-->
    <select id="getEmpsByDeptId" resultType="com.atguigu.mybatis.bean.Employee">
        select *
        from tbl_employee
        where d_id = #{deptId}
    </select>

    <!--鉴别器：MyBatis可以使用discriminator判断某列的值，然后根据某列的值改变封装行为-->
    <!--封装Employee：如果是女生，就把部门信息查询出来，否则不查询；如果是男生，把last_name这一列的值赋值给email-->
    <resultMap id="MyEmpDis" type="com.atguigu.mybatis.bean.Employee">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="email" property="email"/>
        <result column="gender" property="gender"/>
        <!--column：指定判定的列名；javaType：列值对应的Java类型-->
        <discriminator column="gender" javaType="string">
            <!--resultType：指定封装结果的Java类型，不能缺少；或者指定resultMap-->
            <case value="0" resultType="com.atguigu.mybatis.bean.Employee">
                <association property="dept" select="com.atguigu.mybatis.dao.DepartmentMapper.getDeptById" column="d_id"/>
            </case>
            <case value="1" resultType="com.atguigu.mybatis.bean.Employee">
                <id column="id" property="id"/>
                <result column="last_name" property="lastName"/>
                <result column="last_name" property="email"/>
                <result column="gender" property="gender"/>
            </case>
        </discriminator>
    </resultMap>
</mapper>